import { serve } from "https://deno.land/std@0.190.0/http/server.ts";

// Use existing RESEND_API_KEY from environment

const RESEND_API_KEY = Deno.env.get("RESEND_API_KEY");

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers":
    "authorization, x-client-info, apikey, content-type",
};

interface ReportEmailRequest {
  recipients: string[];
  subject: string;
  message: string;
  attachment?: {
    filename: string;
    content: string; // Base64 content
    type: string;
  };
  senderName: string;
}

const handler = async (req: Request): Promise<Response> => {
  // Handle CORS preflight requests
  if (req.method === "OPTIONS") {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { recipients, subject, message, attachment, senderName }: ReportEmailRequest = await req.json();

    console.log('Sending report email to:', recipients);

    const emailData: any = {
      from: "ConstructTest Pro <onboarding@resend.dev>",
      to: recipients,
      subject: subject,
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <div style="background: #f8f9fa; padding: 20px; text-align: center; border-radius: 8px 8px 0 0;">
            <h1 style="color: #333; margin: 0;">ConstructTest Pro</h1>
            <p style="color: #666; margin: 5px 0 0 0;">Construction Testing Report</p>
          </div>
          
          <div style="padding: 30px; background: white; border: 1px solid #e9ecef;">
            <h2 style="color: #333; margin-top: 0;">Test Report Export</h2>
            
            <p style="color: #666; line-height: 1.6;">
              ${message}
            </p>
            
            <div style="background: #f8f9fa; padding: 15px; border-radius: 6px; margin: 20px 0;">
              <h3 style="color: #333; margin: 0 0 10px 0; font-size: 16px;">Report Details</h3>
              <p style="color: #666; margin: 0; font-size: 14px;">
                <strong>Generated by:</strong> ${senderName}<br>
                <strong>Date:</strong> ${new Date().toLocaleDateString()}<br>
                <strong>Time:</strong> ${new Date().toLocaleTimeString()}
              </p>
            </div>
            
            ${attachment ? `
              <div style="background: #e3f2fd; padding: 15px; border-radius: 6px; border-left: 4px solid #2196f3;">
                <p style="margin: 0; color: #1565c0;">
                  ðŸ“Ž <strong>Attachment:</strong> ${attachment.filename}
                </p>
              </div>
            ` : ''}
            
            <div style="margin-top: 30px; padding-top: 20px; border-top: 1px solid #e9ecef;">
              <p style="color: #999; font-size: 12px; margin: 0;">
                This email was sent from ConstructTest Pro - Construction Testing Management System
              </p>
            </div>
          </div>
        </div>
      `,
    };

    // Add attachment if provided
    if (attachment) {
      emailData.attachments = [{
        filename: attachment.filename,
        content: attachment.content,
        encoding: 'base64',
        contentType: attachment.type,
      }];
    }

    const emailResponse = await fetch("https://api.resend.com/emails", {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${RESEND_API_KEY}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify(emailData),
    });

    const result = await emailResponse.json();

    console.log("Email sent successfully:", emailResponse);

    return new Response(JSON.stringify({
      success: true,
      messageId: emailResponse.data?.id,
      recipients: recipients.length
    }), {
      status: 200,
      headers: {
        "Content-Type": "application/json",
        ...corsHeaders,
      },
    });
  } catch (error: any) {
    console.error("Error in send-report-email function:", error);
    return new Response(
      JSON.stringify({ 
        error: error.message,
        details: 'Failed to send report email'
      }),
      {
        status: 500,
        headers: { "Content-Type": "application/json", ...corsHeaders },
      }
    );
  }
};

serve(handler);